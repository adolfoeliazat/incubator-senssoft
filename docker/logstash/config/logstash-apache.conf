input {
  # file {
  #   path => "/var/log/server_logs/access.log"
  #   start_position => "beginning"
  #   sincedb_path => "/dev/null"
  # }

  file {
      path => [ "/var/log/server_logs/access.log" ]  
      start_position => "beginning"
      sincedb_path => "/dev/null"
      type => "apache-access"
  }
  # file {
  #     path => "/var/log/server_logs/error.log"
  #     start_position => "beginning"
  #     sincedb_path => "/dev/null"
  #     type => "apache-error"
  # }
}

filter {
  # ------------------------ Parse services logs into fields ---------------------------
  # APACHE 2
  if [type] == "apache-access" {
    # To process log data (message's content) using some regex or precompiled GROK pattern
    grok {
      match => [ "message", "%{COMBINEDAPACHELOG}"]
    }
    # To extract log's time according to a date pattern
    date {
      match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
    }
    # Extract browser information, if available.
    if [agent] != "" {
      useragent {
        source => "agent"
      }
    }
    # Extract client ip information, if available.
    # if [clientip] != "" {
    #   geoip {
    #     source => "clientip"      
    #     database => "/usr/share/logstash/GeoIP/GeoIP.dat"  
    #     target => "apache_clientip"
    #     add_tag => [ "geoip" ]
    #   }
    # }
  }

  # if [type] == "apache-error" {
  #   grok {
  #     match => [ "message", "%{APACHEERRORLOG}"]
  #     # Directory where to find the custom patterns
  #     patterns_dir => ["/etc/logstash/grok"]
  #   }
  #  if [clientip] != "" {
  #     geoip {
  #       source => "clientip"        
  #       target => "apache_clientip"
  #       add_tag => [ "geoip" ]
  #     }
  #   } 
  # }
}

output {
  # Output data to Elasticsearch instance
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "apache"
    user => "elastic"
    password => "changeme"
    manage_template => true
    template_overwrite => true
    template => "/usr/share/logstash/templates/apache.json"
    template_name => "apache"
  }

  # Debug
  stdout { codec => rubydebug }
}
